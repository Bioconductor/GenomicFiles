%\VignetteIndexEntry{Introduction to GenomicFiles}
%\VignetteDepends{GenomicAlignments, RNAseqData.HNRNPC.bam.chr14}
%\VignetteKeywords{parallel, sequencing, fileIO}
%\VignettePackage{GenomicFiles}

\documentclass{article}

<<style, eval=TRUE, echo=FALSE, results=tex>>=
BiocStyle::latex()
@

\title{Introduction to GenomicFiles}
\author{Valerie Obenchain, Michael Love, Martin Morgan}
\date{Last modified: June 2014; Compiled: \today}

\begin{document}

\maketitle

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This vignette illustrates how to use the \Biocpkg{GenomicFiles} package
for distributed computations across files. The package introduces the
\Rcode{reduceByFile} and \Rcode{reduceByRange} functions for computing
on data in a by file or by range dimension. 

Two user-supplied functions, MAPPER and REDUCER, are similar in spirit 
to \Rcode{Map} and \Rcode{Reduce} in \Rpackage{base} \R{}. Together
they provide a flexible interface to extract, manipulate and combine data.
Both functions are executed on a single worker which means results
are combined from a single worker, not across workers. We plan to add
methods for combining data across workers in a future version.

We assume the reader has some previous experience with \R{} and
with basic manipulation of ranges objects such as \Rcode{GRanges} and
\Rcode{GAlignments} and file classes such as \Rcode{BamFile} and 
\Rcode{BigWigFile}. See the vignettes and documentation in 
\Biocpkg{GenomicRanges}, \Biocpkg{GenomicAlignments}, \Biocpkg{Rsamtools} 
and \Biocpkg{rtracklayer} for an introduction to these classes.

The \Rpackage{GenomicFiles} package is available at bioconductor.org
and can be downloaded via \Rcode{biocLite}:

<<biocLite, eval=FALSE>>=
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFiles")
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Computing by range or by file}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\Rpackage{GenomicFiles} provides infrastructure to manipulate and combine
data by range (across files) or by file (within files). Files or ranges are 
sent to workers with MAPPER and REDUCER functions. Generally the MAPPER 
performs and extranction and transformation / manipulation. The REDUCER 
operates on output from the MAPPER to produce a consolidated result 
(e.g., sum, mean, etc.). When REDUCER is not supplied the results are 
returned directly from the MAPPER. Both MAPPER and REDUCER are executed 
in a distributed step on the same worker.

In this section we use the same files and ranges to compare the
output from \Rcode{reduceByFile} and \Rcode{reduceByRange}. To highlight
the difference in output geometry we apply a MAPPER with no REDUCER.

<<class-load-package, results=hide>>=
library(GenomicFiles)
@

Sample data are bam files from a transcription profiling experiment 
available in the \Rpackage{RNAseqData.HNRNPC.bam.chr14} package.

<<class-bam-data>>=
library(RNAseqData.HNRNPC.bam.chr14)
fls <- RNAseqData.HNRNPC.bam.chr14_BAMFILES
@

Define ranges of interest.
<<intro-ranges>>=
gr <- GRanges("chr14", IRanges(c(19100000, 106000000), width=1e7))
@

This MAPPER counts the number of junctions in each range
(i.e., 'N' operations in the CIGAR).
<<intro-MAPPER>>=
MAPPER <- function(range, file, ...) {
              library(GenomicAlignments) ## for readGAlignments()
              param = ScanBamParam(which=range)
              gal = readGAlignments(file, param=param)
              table(njunc(gal))
          } 
@

\subsection{\Rcode{reduceByRange}}

Individual elements of \Rcode{ranges} are sent to workers along with a 
list of all files. The MAPPER extracts the ranges from all files and 
REDUCER collapses these data. This range reduction can be thought 
of as an `across-file` operation.

<<intro-rbr>>=
rbr <- reduceByRange(gr, fls, MAPPER)
@

The output length corresponds to the number of ranges and elementLengths
to the number of files.

<<intro-rbr-lengths>>=
length(rbr)          ## 2 ranges
elementLengths(rbr)  ## 8 files
@

Each list element contains a table of counts, one for each file.

<<intro-rbr-output>>=
do.call(rbind, rbr[[1]])
@

\subsection{\Rcode{reduceByFile}}

Individual files are sent to workers along with all ranges. The MAPPER 
extracts all ranges from the file and REDUCER collapses these data. 
This file reduction can be thought of as an `within-file` operation.

<<intro-rbf>>=
rbf <- reduceByFile(gr, fls, MAPPER)
@

Output length matches the number of files and elementLengths 
correspond to the number of ranges.

<<intro-rbf>>=
length(rbf)          ## 8 files
elementLengths(rbf)  ## 2 ranges
@

Each list element contains a table of counts, one for each range.
<<intro-rbf-output>>=
rbf[[1]]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Queries across files: \Rcode{reduceByRange}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Pileup summaries with \Rcode{bam2R}}

In this example we summarize nucleotide counts (pileups) across a
group of files. The end goal is to sum pileups for the same ranges 
from different files so we use \Rcode{reduceByRange}.

Create a \Rclass{GRanges} with regions of interest:
<<pileups-new-ranges>>=
gr <- GRanges("chr14", IRanges(c(19411677, 19659063, 105421963, 
              105613740), width = 20))
@

The \Rcode{bam2R} function from the \Rpackage{deepSNV} package
is used to compute the statistics. The MAPPER invokes \Rcode{bam2R} 
and retains only the nucleotide counts (see ?\Rcode{bam2R} for other 
output fields). Counts from the reference strand are uppercase and counts 
from the complement are lowercase.

We are not explicitly passing the \Rcode{bam2R} function through the
MAPPER so \Rcode{deepSNV} must be loaded on each worker so the
function can be found.

<<pileups-MAPPER>>=
MAPPER <- function(range, file, ...) {
    require(deepSNV)
    ct <- bam2R(file, seqlevels(range), start(range), end(range), q=0)
    ct[, c("A", "T", "C", "G", "a", "t", "c", "g")]
}
@

The REDUCER sums the counts by position.
<<pileups-REDUCER>>=
REDUCER <- function(mapped, ...) {
    Reduce("+", mapped)
}
@
 
\Rcode{reduceByRange} returns a list the same length as the number
of ranges. 

<<pileups-reduceByRange>>=
res <- reduceByRange(gr, fls, MAPPER, REDUCER) 
length(res)
@

Each element is a matrix of counts (position by nucleotide)
summed over the 8 files.
<<pileups-res>>=
head(res[[1]])
@

\subsection{ttest with case / control groups}

In this section we show a slightly more complicated example of 
using \Rpackage{GenomicFiles} to stream along the genome and process 
a number of files, here passing along a variable which specifies 
which files belong to which experimental group. This allows for 
operations such as a basepair-level $t$-test on coverage. 

%% TODO: tile across files
Define ranges of interest:
<<groupfiles-ranges>>=
grp_gr <- GRanges("chr14", IRanges(c(19411677, 19659063, 105421963,
                   105613740), width = 20))
@

First we define arbitrary groups for the files:
<<groupfiles-group>>=
grp <- factor(rep(c("A","B"), each=length(fls)/2))
@ 

The map function will read in alignments from each bam file and
convert into a numeric vector of coverage. Note: this is not the most
efficient way to import coverage, however the code is just for
demontration of the principle of grouping files.

<<groupfiles-map>>=
MAPPER <- function(range, file, ...) {
    require(GenomicAlignments)  ## for readGAlignments()
    stopifnot(length(range) == 1)
    param <- ScanBamParam(which=range)
    algns <- readGAlignments(file, param=param)
    as.numeric(coverage(algns)[range][[1]])
}
@ 

The REDUCER combines the numeric coverage vector into a matrix, 
identifies rows which have all zeros, and performs row-wise 
$t$-testing using the \Biocpkg{genefilter} package. The index
of which rows correspond to which basepair of the original range is
stored as a column \Robject{offset}.

<<groupfiles-reduce>>=
REDUCER <- function(mapped, ..., grp) {
    m <- simplify2array(mapped)
    idx <- which(rowSums(m) != 0)
    df <- genefilter::rowttests(m[idx,], grp)
    cbind(offset=idx - 1, df)
}
@ 

The call to \Rcode{reduceByRange} produces a list the same length
as the number of ranges. We can assign this result as a metadata column 
on the ranges. Each element is then a table of basepair-level $t$-test 
results.

<<groupfile-results>>=
res <- reduceByRange(grp_gr, fls, MAPPER, REDUCER, grp=grp)
mcols(grp_gr)$result <- res
head(grp_gr)
@ 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Queries within files: \Rcode{reduceByFile}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{coverage - iterate}
\subsection{tile across chroms cn.mops - no iterate}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Functions to summarize results -> SummarizedExperment}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{GenomicFiles Class}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\Rcode{sessionInfo()}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<sessionInfo, results=tex>>=
toLatex(sessionInfo())
@

\end{document}
