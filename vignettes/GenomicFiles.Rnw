%\VignetteIndexEntry{Introduction to GenomicFiles}
%\VignetteDepends{GenomicAlignments, RNAseqData.HNRNPC.bam.chr14}
%\VignetteKeywords{parallel, sequencing, fileIO}
%\VignettePackage{GenomicFiles}

\documentclass{article}

<<style, eval=TRUE, echo=FALSE, results=tex>>=
BiocStyle::latex()
@

\title{Introduction to \Biocpkg{GenomicFiles}}
\author{Valerie Obenchain, Michael Love, Martin Morgan}
\date{Last modified: June 13, 2014; Compiled: \today}

\begin{document}

\maketitle

\tableofcontents

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This vignette illustrates how to use the \Biocpkg{GenomicFiles} package
for distributed computations across files. The package introduces the
\Rcode{reduceByFile} and \Rcode{reduceByRange} functions for computing
on data in a by file or by range dimension. 

Two user-supplied functions, MAPPER and REDUCER, are similar in spirit 
to \Rcode{Map} and \Rcode{Reduce} in \Rpackage{base} \R{}. Together
they provide a flexible interface to extract, manipulate and combine data.
Both functions are executed on a single worker which means results
are combined from a single worker, not across workers.

We assume the reader has some previous experience with \R{} and
with basic manipulation of ranges objects such as \Rcode{GRanges} and
\Rcode{GAlignments} and file classes such as \Rcode{BamFile} and 
\Rcode{BigWigFile}. See the vignettes and documentation in 
\Biocpkg{GenomicRanges}, \Biocpkg{GenomicAlignments}, \Biocpkg{Rsamtools} 
and \Biocpkg{rtracklayer} for an introduction to these classes.

The \Rpackage{GenomicFiles} package is available at bioconductor.org
and can be downloaded via \Rcode{biocLite}:

<<biocLite, eval=FALSE>>=
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFiles")
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Quick Start}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\Rpackage{GenomicFiles} provides infrastructure to manipulate and combine
data by range (across files) or by file (within files). A MAPPER 
function extracts and manipulates chunks of data. The REDUCER 
operates on the output of the MAPPER to produce a consolidated result 
(e.g., sum, mean, etc.). The REDUCER is optional; when none is supplied
results are returned directly from the MAPPER.

<<quick_start-load-package, results=hide>>=
library(GenomicFiles)
@

File paths can be a character vector or a list of file classes
such as \Rcode{BamFile}, \Rcode{BigWigFile} etc. 
<<class-bam-data>>=
library(RNAseqData.HNRNPC.bam.chr14)
fls <- RNAseqData.HNRNPC.bam.chr14_BAMFILES
@

Define ranges of interest as a \Rcode{GRanges} or \Rcode{GRangesList}.
<<quick-start-ranges>>=
gr <- GRanges("chr14", IRanges(c(19411500 + (1:5)*20), width=10))
@

This MAPPER produces a summary table of pileups.
<<quick-start-MAPPER>>=
MAPPER <- function(range, file, ...) {
    library(Rsamtools)
    res <- pileup(file, scanBamParam=ScanBamParam(which=range))
    xtabs(count ~ pos + nucleotide, res)
}
@

\Rcode{reduceByFile} computes pileups for the ranges in each
file separately. When \Rcode{summarize=TRUE} results are returned 
as a \Rcode{SummarizedExperiment}.
<<quick-start-reduceByFile>>=
se <- reduceByFile(gr, fls, MAPPER, summarize=TRUE)
se
@

Results are stored in the \Rcode{assays} slot. The dimensions
correspond to the number of rows x files.
<<quick-start-assays>>=
dim(assays(se)[[1]])
@

To compute across files instead of within use \Rcode{reduceByRange}.
In this dimension we can compute a combined pileup count for each 
range. We use the same MAPPER and a REDUCER that combines the counts.
<<quick-start-MAPPER-REDUCER-reduceByRange>>=
##REDUCER <- function(mapped, ...) {
##  TODO: merge by position
#}
@

When \Rcode{summarize=FALSE} a list is returned. The result
contains one summary table for each range. 
<<quick-start-reduceByRange>>=
#lst <- reduceByRange(gr, fls, MAPPER, REDUCER)
#length(lst)
#head(lst[[1]], 3)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview of classes and functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{\Rcode{GenomicFiles} class}

The \Rcode{GenomicFiles} class is a matrix-like container where rows
represent ranges of interest and columns represent files. The object
can be subset on files and / or ranges to perform different
experimental runs.

The class can be thought of as a precursor to the \Rcode{SummarizedExperiment} 
class. It has slots for \Rcode{files}, \Rcode{rowData}, \Rcode{colData} 
and \Rcode{exptData} but does not contain the \Rcode{assays} slot. The
\Rcode{rowData} is a \Rcode{DataFrame} instead of a \Rcode{GenomicRanges}.

A \Rcode{GenomicFiles} can be used as the \Rcode{ranges} argument to the 
reduceBy* functions. When \Rcode{summarize} is TRUE, data from the common 
slots are transferred to the \Rcode{SummarizedExperiment} result. 
NOTE: Results can only be put into a \Rcode{SummarizedExperiment} when no 
reduction is performed because of the matching dimensions requirement 
(i.e., a REDUCER collapses the results in one dimension).

\subsection{\Rcode{reduceByFile} and \Rcode{reduceByRange} functions}

\Rpackage{GenomicFiles} provides infrastructure to manipulate and combine
data by range (across files) or by file (within files). Files or ranges are 
sent to workers with MAPPER and REDUCER functions. Generally the MAPPER 
performs and extranction and transformation / manipulation. The REDUCER 
operates on output from the MAPPER to produce a consolidated result 
(e.g., sum, mean, etc.). When REDUCER is not supplied the results are 
returned directly from the MAPPER. Both MAPPER and REDUCER are executed 
in a distributed step on the same worker.

In this section we use the same files and ranges to compare the
output from \Rcode{reduceByFile} and \Rcode{reduceByRange}. To highlight
the difference in output geometry a MAPPER is applied with no REDUCER.

Sample data are bam files from a transcription profiling experiment 
available in the \Rpackage{RNAseqData.HNRNPC.bam.chr14} package.

<<class-bam-data>>=
library(RNAseqData.HNRNPC.bam.chr14)
fls <- RNAseqData.HNRNPC.bam.chr14_BAMFILES
@

Define ranges of interest.
<<intro-ranges>>=
gr <- GRanges("chr14", IRanges(c(19100000, 106000000), width=1e7))
@

This MAPPER counts the number of junctions in each range
(i.e., 'N' operations in the CIGAR).
<<intro-MAPPER>>=
MAPPER <- function(range, file, ...) {
              library(GenomicAlignments) ## for readGAlignments()
              param = ScanBamParam(which=range)
              gal = readGAlignments(file, param=param)
              table(njunc(gal))
} 
@

Individual elements of \Rcode{ranges} are sent to workers along with a 
list of all files. The MAPPER extracts the ranges from all files and 
REDUCER collapses these data. This range reduction can be thought 
of as an `across-file` operation.

<<intro-rbr>>=
rbr <- reduceByRange(gr, fls, MAPPER)
@

The output length corresponds to the number of ranges and elementLengths
to the number of files.

<<intro-rbr-lengths>>=
length(rbr)          ## 2 ranges
elementLengths(rbr)  ## 8 files
@

Each list element contains a table of counts, one for each file.

<<intro-rbr-output>>=
do.call(rbind, rbr[[1]])
@

In the case of \Rcode{reduceByFiles}, the files are sent to workers 
along with all ranges. The MAPPER  extracts all ranges from the file 
and the REDUCER collapses the data. This file reduction can be thought 
of as an `within-file` operation.

<<intro-rbf>>=
rbf <- reduceByFile(gr, fls, MAPPER)
@

Output length matches the number of files and elementLengths 
correspond to the number of ranges.

<<intro-rbf>>=
length(rbf)          ## 8 files
elementLengths(rbf)  ## 2 ranges
@

Each list element contains a table of counts, one for each range.
<<intro-rbf-output>>=
rbf[[1]]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Queries across files with \Rcode{reduceByRange}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Pileup summaries with \Rcode{bam2R}}

In this example nucleotide counts are summed by position across files.

Create a \Rclass{GRanges} with regions of interest:
<<pileups-new-ranges>>=
gr <- GRanges("chr14", IRanges(c(19411677, 19659063, 105421963, 
              105613740), width = 20))
@

The \Rcode{bam2R} function from the \Rpackage{deepSNV} package
is used to compute the statistics. The MAPPER invokes \Rcode{bam2R} 
and retains only the nucleotide counts (see ?\Rcode{bam2R} for other 
output fields). Counts from the reference strand are uppercase and counts 
from the complement are lowercase.

Because the \Rcode{bam2R} function is not explicitly passed through the
MAPPER, \Rcode{deepSNV} must be loaded on each worker so the
function can be found.

<<pileups-MAPPER>>=
MAPPER <- function(range, file, ...) {
    require(deepSNV)
    ct <- bam2R(file, seqlevels(range), start(range), end(range), q=0)
    ct[, c("A", "T", "C", "G", "a", "t", "c", "g")]
}
@

The REDUCER sums the counts by position.
<<pileups-REDUCER>>=
REDUCER <- function(mapped, ...) {
    Reduce("+", mapped)
}
@
 
\Rcode{reduceByRange} returns a list the same length as the number
of ranges. 

<<pileups-reduceByRange>>=
res <- reduceByRange(gr, fls, MAPPER, REDUCER) 
length(res)
@

Each element is a matrix of counts (position by nucleotide)
summed over the 8 files.
<<pileups-res>>=
head(res[[1]])
@

\subsection{Case / control groups ttest}

In this section we show a slightly more complicated example of 
using \Rpackage{GenomicFiles} to stream along the genome and process 
a number of files, here passing along a variable which specifies 
which files belong to which experimental group. This allows for 
operations such as a basepair-level $t$-test on coverage. 

%% TODO: tile across files
Define ranges of interest:
<<groupfiles-ranges>>=
grp_gr <- GRanges("chr14", IRanges(c(19411677, 19659063, 105421963,
                   105613740), width = 20))
@

First we define arbitrary groups for the files:
<<groupfiles-group>>=
grp <- factor(rep(c("A","B"), each=length(fls)/2))
@ 

The map function will read in alignments from each bam file and
convert into a numeric vector of coverage. Note: this is not the most
efficient way to import coverage, however the code is just for
demontration of the principle of grouping files.

<<groupfiles-map>>=
MAPPER <- function(range, file, ...) {
    require(GenomicAlignments)  ## for readGAlignments()
    stopifnot(length(range) == 1)
    param <- ScanBamParam(which=range)
    algns <- readGAlignments(file, param=param)
    as.numeric(coverage(algns)[range][[1]])
}
@ 

The REDUCER combines the numeric coverage vector into a matrix, 
identifies rows which have all zeros, and performs row-wise 
$t$-testing using the \Biocpkg{genefilter} package. The index
of which rows correspond to which basepair of the original range is
stored as a column \Robject{offset}.

<<groupfiles-reduce>>=
REDUCER <- function(mapped, ..., grp) {
    m <- simplify2array(mapped)
    idx <- which(rowSums(m) != 0)
    df <- genefilter::rowttests(m[idx,], grp)
    cbind(offset=idx - 1, df)
}
@ 

The call to \Rcode{reduceByRange} produces a list the same length
as the number of ranges. We can assign this result as a metadata column 
on the ranges. Each element is then a table of basepair-level $t$-test 
results.

<<groupfile-results>>=
res <- reduceByRange(grp_gr, fls, MAPPER, REDUCER, iterate=FALSE, grp=grp)
mcols(grp_gr)$result <- res
head(grp_gr)
@ 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Queries within files with \Rcode{reduceByFile}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Coverage}

In this example coverage is computed for each sample file. The 
\Rcode{tileGenome} function from the \Biocpkg{GenomicRanges} package 
is used to create a continuous sequence of ranges (tiles) across 
chromosome 14. The seqlength argument is extracted from the seqinfo 
object by calling \Rcode{seqinfo} on the BamFile.
<<coverage-create_tiles>>=
sl <- seqlengths(seqinfo(BamFile(fls[[1]]))["chr14"])
tiles <- tileGenome(sl, ntile=5)
@

\Rcode{tiles} is a GRangesList of length \Rcode{ntile}.
<<coverage-tiles>>=
tiles
@

The MAPPER computes coverage as an RleList and sums the coverage and 
number of positions (width) for each range.
<<coverage-MAPPER>>=
MAPPER = function(range, file, ...) {
    rle <- coverage(file, param=ScanBamParam(which=range))[range]
    view <- Views(rle, as(range, "RangesList"))
    c(n = as.numeric(sum(unlist(width(view)))),
      sum = as.numeric(sum(sapply(view, sum))))
}
@

REDUCER sums the coverage and counts across all ranges. We will
apply the reduction iteratively (after MAPPER is done with 
each range). 

<<coverage-REDUCER>>=
REDUCER = function(mapped, ...) {
    Reduce(function(i, j) Map("+", i, j), mapped)
}
@

Compute coverage for all 8 files.
<<coverage-results>>=
cvg <- reduceByFile(tiles, fls, MAPPER, REDUCER, iterate=TRUE)
head(cvg)
@

\subsection{Copy number analysis with \Biocpkg{cn.mops}}

TODO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data access / storage}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Chunking through data: parallelization vs streaming}

TODO

\subsection{Distributed data storage}

TODO

% Processing chunks of data can be done with parallelization or streaming.
%- splitting data is expensive (parallel)
%- cannot have all data at once (streaming)
%
% R has no explicit API for this
%- use connections to read from HDSF(hadoop) or rhdf5
%- leverage distributed storage, compute where data are stored
%  (RDFS, Hadoop)
%- iterators focus on inner code chunk processing

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\Rcode{sessionInfo()}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<sessionInfo, results=tex>>=
toLatex(sessionInfo())
@

\end{document}
